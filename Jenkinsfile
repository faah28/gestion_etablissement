pipeline {
    agent any

    stages {
        stage('Cloner le code') {
            steps {
                git url: 'https://github.com/faah28/gestion_etablissement.git', branch: 'main'
            }
        }

        stage('Build du projet') {
            steps {
                script {
                    // Ex√©cute les commandes de build du projet
                    echo 'Building Symfony project...'
                    bat 'composer install --no-interaction'
                }
            }
        }

        stage('Ex√©cution des tests unitaires') {
            steps {
                script {
                    // Ex√©cute les tests unitaires Symfony
                    echo 'Running unit tests...'
                    bat 'php bin/phpunit'
                }
            }
        }

        stage('Ex√©cution des tests IHM (Front-end)') {
            steps {
                script {
                    // Ex√©cute les tests pour l'IHM (si applicable)
                    echo 'Running front-end tests...'
                    bat 'npm run test' // Modifier selon la commande utilis√©e pour tes tests front-end
                }
            }
        }

        stage('V√©rification de la qualit√© logicielle') {
            steps {
                script {
                    // V√©rification avec PHPStan ou autre outil
                    echo 'Checking code quality...'
                    bat 'php vendor/bin/phpstan analyse'
                }
            }
        }

        stage('Packaging de l\'art√©fact') {
            steps {
                script {
                    // Si n√©cessaire, empaqueter l'art√©fact pour l'envoyer √† un repository
                    echo 'Packaging artifact...'
                    bat 'composer build'
                }
            }
        }

        stage('Cr√©ation de l\'image Docker') {
            steps {
                script {
                    // Build des images Docker √† partir des Dockerfiles
                    echo 'Building Docker images...'
                    bat 'docker-compose build'
                }
            }
        }

        stage('D√©pot des art√©facts dans un repository') {
            steps {
                script {
                    // D√©poser dans un repository local ou public selon l'environnement
                    echo 'Pushing artifacts to repository...'
                    // Exemple de commande pour un repository local
                    bat 'docker push local-repository/my-image:latest'
                }
            }
        }

        stage('Push de l\'image Docker dans le registry') {
            steps {
                script {
                    // Push dans un registry distant pour pr√©prod et prod
                    echo 'Pushing Docker images to registry...'
                    bat 'docker push registry/my-image:latest'
                }
            }
        }

        stage('Provisioning de l\'environnement cible') {
            steps {
                script {
                    // Provisionner l'environnement cible si n√©cessaire
                    echo 'Provisioning target environment...'
                    // Exemple de commande pour un environnement de dev ou prod
                    bat 'ansible-playbook provision.yml'
                }
            }
        }

        stage('D√©ploiement automatique des images Docker') {
            steps {
                script {
                    // D√©ployer les images sur les microservices
                    echo 'Deploying Docker images...'
                    bat 'docker-compose up -d' // Peut √™tre personnalis√© selon tes besoins
                }
            }
        }
    }

    post {
        success {
            echo 'üéâ Pipeline r√©ussie et art√©fact publi√© !'
        }
        failure {
            echo '‚ö†Ô∏è Erreur dans la pipeline, v√©rifiez les logs.'
        }
    }
}
